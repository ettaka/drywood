#!/usr/bin/python

import datetime
import sys
import matplotlib.pyplot as plt
import numpy as np
from numpy.random import normal
import scipy.optimize
import argparse

def make_model_function(*args):
    """
    args[0] is the number of the model
    if model==2 or model==4 then args[1] is the initial mass.
    """
    model_num=args[0]
    if model_num==2:
        m0=args[1]
        def f(t, mi, k):
            return (m0-mi)*np.exp(-k*t)+mi

    elif model_num==3:
        def f(t, C1, C2, m0, r1, r2):
            return C1*np.exp(r1*t)+C2*np.exp(r2*t)+m0-C1-C2

    elif model_num==4:
        m0=args[1]
        def f(t, C1, C2, r1, r2):
           return C1*np.exp(r1*t)+C2*np.exp(r2*t)+m0-C1-C2

    else:
        def f(t, m0, mi, k):
            return (m0-mi)*np.exp(-k*t)+mi

    return f

def final_model_function(f, *args):
    def f_out(t):
        return f(t, *args)
    return f_out

def root_function(f, target):
    def f_out(t):
        return f(t)-target
    return f_out
 
def solve_drying_time(f, mtarget, tlast):
    model_root_f = root_function(f, mtarget)
    return scipy.optimize.root(model_root_f, [1.], method='hybr')

def parse_data(content):
    x_data = np.array([])
    y_data = np.array([])
    for row in content:
        element = row.split() 
        x_data = np.append(x_data, [float(element[0])])
        y_data = np.append(y_data, [float(element[1])])
    return x_data, y_data

def parse_data_datetime(content):
    x_data = np.array([])
    y_data = np.array([])
    row=content.pop(0)
    element=row.split()
    y_data = np.append(y_data, [float(element[1])])
    x_data = np.append(x_data, [0.])
    start_time=parse_datetime(element[0])
    for row in content:
        element = row.split() 
        y_data = np.append(y_data, [float(element[1])])
        delta = parse_datetime(element[0])-start_time 
        minutes=time_delta_min_sec(delta)[0]
        x_data = np.append(x_data, [minutes])
    return x_data, y_data


def select_fit_points(x_data,y_data,fit_range):
    if fit_range==None: return x_data, y_data
    print "selecting fit points with range: ", fit_range
    r = fit_range.split(':')
    xmin = float(r[0])
    xmax = float(r[1])
    x_selected=np.array([])
    y_selected=np.array([])
    for i, time in enumerate(x_data):
        if xmin <= time and xmax >= time:
            x_selected = np.append(x_selected, [x_data[i]])
            y_selected = np.append(y_selected, [y_data[i]])
    return x_selected, y_selected
            
def parse_datetime(timestr):
    ts=[int(i) for i in timestr.split("-")]
    return datetime.datetime(*ts) 
    
def time_delta_min_sec(delta):
    return divmod(delta.days*86400+delta.seconds, 60)

parser = argparse.ArgumentParser(description='Wood evaporated mass estimation')
 
parser.add_argument('-r', '--fit-range', type=str, help='fit range in hours given as min:max')
parser.add_argument('-m', '--model', type=int, help='mathematical model')
parser.add_argument('filename', type=str)
parser.add_argument('-d', action='store_true', default=False)
parser.add_argument('-t', '--target', type=float, help='evaporation mass residual target (%)')

args = parser.parse_args()
filename = args.filename
model_num = args.model
fit_range = args.fit_range
use_datetime = args.d
evap_target_p = args.target
if evap_target_p==None: evap_target_p=1.

print "model:", model_num

with open(filename) as f:
    content = f.readlines()

print "use_datetime:", use_datetime
if use_datetime:
    x_data, y_data = parse_data_datetime(content)
else:
    x_data, y_data = parse_data(content)

x_data = x_data/60.
m0=y_data[0]
mlast=y_data[-1]

x_selected, y_selected = select_fit_points(x_data,y_data,fit_range)
model=make_model_function(model_num,m0)

if model_num==1: initial = [m0,200.,0.02]
if model_num==2: initial = [200.,0.02]
if model_num==3: initial = [71.4, -24.2, m0, -0.00543, 0.00543]
if model_num==4: initial = [71.4, -24.2, -0.00543, 0.00543]

parameter, covariance_matrix = scipy.optimize.curve_fit(model, x_selected, y_selected,initial)

if model_num==1:
    m0 = parameter[0]
    mi = parameter[1]
    k  = parameter[2]
if model_num==2:
    mi = parameter[0]
    k  = parameter[1]
if model_num==3:
    m0 = parameter[2]
    C1 = parameter[0]
    C2 = parameter[1]
    mi = m0-C1-C2
if model_num==4:
    C1 = parameter[0]
    C2 = parameter[1]
    mi = m0-C1-C2

print "m0\tmi\tmlast"
print np.round(m0, 1),"\t",np.round(mi, 1),"\t",np.round(mlast, 1)

evap_final_p = np.round((m0-mi)/mi*100., 1)
evap_final = np.round(m0-mi)
evap_last_p = np.round((mlast-mi)/mi*100., 1)
evap_last = np.round(mlast-mi)
tlast = x_data[-1]
msg = "Total evaporated mass at final state: "
msg += str(evap_final) + "g (" + str(evap_final_p) + "%)\n"
sys.stdout.write(msg)
msg = "Evaporation mass residual: "
msg += str(evap_last) + "g (" + str(evap_last_p) + "%)\n"
sys.stdout.write(msg)

final_model = final_model_function(model, *parameter)
mtarget = mi*(1.+evap_target_p/100.)
drying_time = solve_drying_time(final_model, mtarget, tlast) 
print "mtarget:", np.round(mtarget, 1)
print "time left:", np.round(drying_time['x'][0]-tlast, 1)

x = np.linspace(min(x_data), max(x_data)+2*24., 1000)
plt.plot(x_data, y_data, 'rx', label='data')
plt.plot(x, final_model(x), 'b-', label='fit')  
plt.show()



